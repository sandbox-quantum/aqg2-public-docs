{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./src/js/utils/FeatureFlagRenderer.js","webpack:///./src/js/utils/AuthClient.js","webpack:///./src/js/utils/ConfigurationClient.js","webpack:///./src/js/index.js"],"sourcesContent":["export class FeatureFlagRenderer {\n  static FEATURE_FLAG_DATA_KEY = 'ff-with';\n  static FEATURE_FLAG_DATASET_KEY = 'ffWith';\n  static FEATURE_FLAG_HIDE_CLOSEST_DATASET_KEY = 'ffHideClosest';\n  static FEATURE_FLAG_VALUE_DATASET_KEY = 'ffValue';\n\n  static NAVIGATION_FEATURE_FLAGS_KEY = 'flags';\n  static NAVIGATION_FEATURE_FLAG_ELEMENT_SELECTOR = 'ff';\n  static NAVIGATION_FEATURE_FLAG_VALUE_DATASET_KEY = 'ffValue';\n\n  static FORCE_HIDDEN_CLASS = 'force-hidden';\n\n  constructor(client) {\n    this.client = client;\n  }\n\n  /**\n   * Iterate through elements that have feature flag wrapper.\n   * If they match any of the provided flags, we will display the DOM element.\n   */\n  displayFeatureFlaggedContent() {\n    this.displayFlaggedPage();\n    this.displayNavigationContent();\n    this.displayFlaggedContent();\n  }\n\n  displayFlaggedPage() {\n    const overlay = document.getElementById('saq-ff-overlay');\n    const meta = document.querySelector('meta[name=\"flags\"]');\n\n    // Page is not flagged, do nothing\n    if (!meta) return;\n\n    const metaFlags = meta.getAttribute('flags').split(',');\n    const metaFlagValues = meta.getAttribute('flagValues');\n\n    // By default, match the flag against \"true\"\n    let values = Array(metaFlags.length).fill(true);\n    if (metaFlagValues) {\n      values = metaFlagValues.split(',').map((v) => {\n        // Convert string booleans to booleans, leave custom values untouched:\n        // \"True\" instead of \"true\" and \"False\" instead of \"false\" are necessary\n        // to handle mkdocs bool-to-string conversion\n        if (v === 'True') return true;\n        if (v === 'False') return false;\n        return v;\n      });\n    }\n\n    // Match all flags\n    let hasAllFlags = true;\n    for (let i = 0; i < metaFlags.length && hasAllFlags; i++) {\n      hasAllFlags = hasAllFlags && values[i] === this.client.getFeatureFlag(metaFlags[i]);\n    }\n\n    if (hasAllFlags) {\n      meta.remove();\n      overlay && overlay.remove();\n    } else {\n      window.location.replace(meta.getAttribute('redirectTo'));\n    }\n  }\n\n  displayNavigationContent() {\n    const nodes = document.querySelectorAll(FeatureFlagRenderer.NAVIGATION_FEATURE_FLAG_ELEMENT_SELECTOR);\n    for (const node of nodes) {\n      try {\n        // Extract feature flag list into a string array. We allow comma (,) as a separator between different flags.\n        const nodeFlags = node.attributes[FeatureFlagRenderer.NAVIGATION_FEATURE_FLAGS_KEY].value.split(',').map((ff) => ff.trim());\n\n        // Enable data flag `data-ff-value` if we want to display a section depending on different values from boolean true.\n        let targetValue = true;\n        const datasetValue = node.dataset[FeatureFlagRenderer.NAVIGATION_FEATURE_FLAG_VALUE_DATASET_KEY];\n        if (datasetValue !== undefined) {\n          targetValue = datasetValue;\n          if (['true', 'false'].includes(datasetValue)) {\n            targetValue = datasetValue === 'true';\n          }\n        }\n\n        // Check if all flags match the provided values.\n        const hasAllFlags = nodeFlags.reduce((foundIt, ff) => foundIt && this.client.getFeatureFlag(ff) === targetValue, true);\n\n        // Target the closest navigation item with a provided class\n        const closestNodeToHide = node.closest('.md-nav__item');\n        if (closestNodeToHide && !hasAllFlags) {\n          closestNodeToHide.remove();\n        } else {\n          node.setAttribute('aria-hidden', 'false');\n        }\n      } catch (e) {\n        // do nothing, we just leave the element hidden\n      }\n    }\n  }\n\n  displayFlaggedContent() {\n    const nodes = document.querySelectorAll(`[data-${FeatureFlagRenderer.FEATURE_FLAG_DATA_KEY}]`);\n    for (const node of nodes) {\n      try {\n        // Extract feature flag list into a string array. We allow comma (,) as a separator between different flags.\n        const nodeFlags = node.dataset[FeatureFlagRenderer.FEATURE_FLAG_DATASET_KEY].split(',').map((ff) => ff.trim());\n\n        // Enable data flag `data-ff-value` if we want to display a section depending on different values from boolean true.\n        let targetValue = true;\n        const datasetValue = node.dataset[FeatureFlagRenderer.FEATURE_FLAG_VALUE_DATASET_KEY];\n        if (datasetValue !== undefined) {\n          targetValue = datasetValue;\n          if (['true', 'false'].includes(datasetValue)) {\n            targetValue = datasetValue === 'true';\n          }\n        }\n\n        // Check if all flags match the provided values.\n        const hasAllFlags = nodeFlags.reduce((foundIt, ff) => foundIt && this.client.getFeatureFlag(ff) === targetValue, true);\n\n        // If feature flags don't match, we have to hide an element.\n        // In case where we want to hide some parent structure, we use the \"hideClosest\" value.\n        if (!hasAllFlags && node.dataset[FeatureFlagRenderer.FEATURE_FLAG_HIDE_CLOSEST_DATASET_KEY]) {\n          const closestNodeToHide = node.closest(node.dataset[FeatureFlagRenderer.FEATURE_FLAG_HIDE_CLOSEST_DATASET_KEY]);\n\n          // We only hide if there is a match with the selector provided.\n          // This is done on purpose to simplify this feature as a whole.\n          if (closestNodeToHide) {\n            closestNodeToHide.remove();\n          }\n          continue;\n        }\n\n        if (!hasAllFlags) {\n          node.remove();\n        } else {\n          node.setAttribute('aria-hidden', 'false');\n        }\n      } catch (e) {\n        // do nothing, we just leave the element hidden\n      }\n    }\n  }\n}\n","export class AuthClient {\n  async init() {\n    try {\n      if (process.env.AQG2_DOCS_ENV) {\n        const response = await fetch('/auth/');\n        await response.json();\n      } else {\n        const response = await fetch('/api/v2', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ query: 'query { viewer { __typename } }' }),\n        });\n        await response.json();\n      }\n      return true;\n    } catch (e) {\n      // Assume the user is not authenticated\n      return false;\n    }\n  }\n}\n","import { AuthClient } from './AuthClient';\n\n/**\n * Custom \"feature flag\" for content that should only be visible to viewers\n * with an ongoing valid AQtive Guard session.\n */\nconst AUTH_USER_FLAG = 'AuthenticatedUser';\n\nexport class ConfigurationClient {\n  constructor() {\n    this.presetFlags = {};\n    this.defaultFlags = {\n      // Uncomment the next line to simulate an authenticated session.\n      // [AUTH_USER_FLAG]: true,\n      // See available values in LaunchDarkly or `cs/web_findings/app/models/feature_flags.py`:\n      //\n      // For example, for the following flag definition...\n      //    FEATURE_FLAG_XYZ = \"FeatureFlagXyz\"\n      // ... add the following line\n      //    FeatureFlagXyz: true\n      //\n      // *Do not commit* changes to this file.\n      //\n      // Currently, the following flags are available:\n      //\n      // EnableCrowdStrikeIngestions: false,\n      // EnableEnrichmentFilter: false,\n      // EnableCrowdStrikeScans: false,\n      // EnableRuleBuilder: false,\n      // EnableKeystores: false,\n      // EnableRagu: false,\n    };\n  }\n\n  getFeatureFlag(flag) {\n    if (flag in this.defaultFlags) {\n      return this.defaultFlags[flag];\n    }\n    if (flag in this.presetFlags) {\n      return this.presetFlags[flag];\n    }\n    return false;\n  }\n\n  async init() {\n    if (process.env.EXTERNAL_BUILD) {\n      // Do not try to load the configuration client if this is an external build:\n      // the API for authentication and flagging is not available\n      return;\n    }\n    await Promise.all([this.loadAuth(), this.loadFeatureFlags()]);\n  }\n\n  async loadFeatureFlags() {\n    try {\n      const apiUrl = process.env.AQG2_DOCS_ENV ? `/auth/public/presets` : `/api/internal/presets`;\n      const response = await fetch(apiUrl);\n      const data = await response.json();\n\n      this.presetFlags = { ...this.presetFlags, ...data.featureFlags };\n    } catch (e) {\n      // do nothing, leave the environment as it is\n    }\n  }\n\n  async loadAuth() {\n    try {\n      const authenticated = this.defaultFlags[AUTH_USER_FLAG] ? true : await new AuthClient().init();\n\n      this.presetFlags = { ...this.presetFlags, [AUTH_USER_FLAG]: authenticated };\n    } catch (e) {\n      // Do nothing, if the page requires auth there will be a redirection, otherwise\n      // assume the user is not authenticated\n    }\n  }\n}\n","import { FeatureFlagRenderer } from './utils/FeatureFlagRenderer';\nimport { ConfigurationClient } from './utils/ConfigurationClient';\n\nwindow.onload = async () => {\n  // Init configuration client\n  const client = new ConfigurationClient();\n  await client.init();\n\n  // Run the feature flagging checkups\n  const featureFlagRenderer = new FeatureFlagRenderer(client);\n  featureFlagRenderer.displayFeatureFlaggedContent();\n\n  // Mark the primary navigation as loaded once everything is done\n  const mainNavigation = document.querySelectorAll('.md-nav--primary');\n  mainNavigation.forEach((mn) => mn.classList.add('navigation-loaded'));\n\n  // Mark the secondary navigation as loaded once everything is done\n  const secondaryNavigation = document.querySelectorAll('.md-nav--secondary');\n  secondaryNavigation.forEach((sn) => sn.classList.add('navigation-loaded'));\n};\n"],"names":["FeatureFlagRenderer","static","constructor","client","this","displayFeatureFlaggedContent","displayFlaggedPage","displayNavigationContent","displayFlaggedContent","overlay","document","getElementById","meta","querySelector","metaFlags","getAttribute","split","metaFlagValues","values","Array","length","fill","map","v","hasAllFlags","i","getFeatureFlag","remove","window","location","replace","nodes","querySelectorAll","NAVIGATION_FEATURE_FLAG_ELEMENT_SELECTOR","node","nodeFlags","attributes","NAVIGATION_FEATURE_FLAGS_KEY","value","ff","trim","targetValue","datasetValue","dataset","NAVIGATION_FEATURE_FLAG_VALUE_DATASET_KEY","undefined","includes","reduce","foundIt","closestNodeToHide","closest","setAttribute","e","FEATURE_FLAG_DATA_KEY","FEATURE_FLAG_DATASET_KEY","FEATURE_FLAG_VALUE_DATASET_KEY","FEATURE_FLAG_HIDE_CLOSEST_DATASET_KEY","AuthClient","init","response","fetch","json","AUTH_USER_FLAG","ConfigurationClient","presetFlags","defaultFlags","flag","loadFeatureFlags","apiUrl","data","featureFlags","loadAuth","authenticated","onload","async","forEach","mn","classList","add","sn"],"sourceRoot":""}